library("RMySQL")
library("DBI")
library(tidyverse)
library(carData)
library(crosstable)
library(car)
library(caret)
library(corrplot)
library(plotly)
library(stats)
library(graphics)
library(gbm)
library(randomForest)
library(nnet)
mydb = dbConnect(RMySQL::MySQL(), user='root',
password='Vlabur80!',
dbname='allstate',
host= '127.0.0.1',
port=3306)
dbListTables(mydb)
rs <-  dbSendQuery(mydb, "select * from train_date;")
df2 <- dbFetch(rs, n = 3734697)# read Date
# Delete connection end cursor
dbClearResult(rs)
dbDisconnect(mydb)
rm(mydb,rs)
train <- df2 %>%
select ("Var1":"Var8","Cat1":"Cat12","NVVar1","NVVar2","NVVar3","NVVar4", "NVCat","OrdCat","Preis")
rm(df2)
colnames(train)[27] <- "Claim_Amount"
simpleMod <- dummyVars(~Claim_Amount+ .,
data = train)
df <- data.frame(predict(simpleMod,train))
rm(simpleMod,train)
Claim_Amount <- df$Claim_Amount
df = subset(df, select = -c(Claim_Amount) )
correlations <- cor(df)
highCorr <- findCorrelation(correlations, cutoff = .9)
filteredSegData <- df[,-highCorr]
rm(df,highCorr,correlations)
trans <- preProcess(filteredSegData,
method = c("BoxCox","center","scale","pca"))
transformed <- predict(trans,filteredSegData)
rm(trans,filteredSegData)
transformed["Claim_Amount"] <- Claim_Amount
rm(Claim_Amount)
# Modellierung
trainSize <- round(nrow(transformed) * 0.9)# 0.7
testSize <- nrow(transformed) - trainSize
set.seed(123)
train_ind <- sample(seq_len(nrow(transformed)), size = trainSize)
trainSet <- transformed[train_ind, ]
testSet <- transformed[-train_ind, ]
rm(transformed, train_ind)
#nnet Variable
predictors <- subset(trainSet, select = -c(Claim_Amount) )
outcome <- trainSet$Claim_Amount
Claim_Amount <- testSet$Claim_Amount
testSet = subset(testSet, select = -c(Claim_Amount) )
#1) GBM
ames_gbm1 <- gbm(formula = trainSet$Claim_Amount ~ .,
data = trainSet,
distribution = "gaussian",
n.trees = 5000,
shrinkage = 0.1,
interaction.depth = 3,
n.minobsinnode = 10,
cv.folds = 5 )
